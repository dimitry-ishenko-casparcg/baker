////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#ifndef PIE_TYPES_HPP
#define PIE_TYPES_HPP

////////////////////////////////////////////////////////////////////////////////
#include <cstdint>
#include <vector>

////////////////////////////////////////////////////////////////////////////////
namespace pie
{

////////////////////////////////////////////////////////////////////////////////
using byte = std::uint8_t;
using word = std::uint16_t;

////////////////////////////////////////////////////////////////////////////////
class buffer : public std::vector<byte>
{
    using base = std::vector<byte>;

public:
    explicit buffer(std::size_t n = 42) : base(n, 0) { }

    template<typename T>
    T* as() { return reinterpret_cast<T*>(base::data()); }

    template<typename T>
    const T* as() const { return reinterpret_cast<T*>(base::data()); }
};

////////////////////////////////////////////////////////////////////////////////
#pragma pack(push, 1)

struct general_data
{
    byte uid;

    bool ps :1;
    bool reset :1;
    byte _pad :6;

    byte row[16];
};

////////////////////////////////////////////////////////////////////////////////
struct descriptor_data
{
    byte uid;
    byte cmd;

    byte mode;
    byte _pad[4];

    byte columns;
    byte rows;

    byte _pad2 :6;
    bool green_led_on :1;
    bool red_led_on :1;

    byte ver;
    word pid;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template<byte Cmd>
struct send_cmd_base
{
    const byte id = 0;
    const byte cmd = Cmd;
};

template<byte Cmd>
struct send_cmd : send_cmd_base<Cmd>
{
    const byte _pad[36 - sizeof(send_cmd_base<Cmd>)] { };
};

////////////////////////////////////////////////////////////////////////////////
struct request_descriptor : send_cmd<214> { };

struct generate_data : send_cmd<177> { };

#pragma pack(pop)

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif
